import{_ as o,c as r,o as a,ag as t}from"./chunks/framework.BSxiluPM.js";const h=JSON.parse('{"title":"Foreword","description":"","frontmatter":{},"headers":[],"relativePath":"chapter00/foreword.md","filePath":"chapter00/foreword.md"}'),n={name:"chapter00/foreword.md"};function s(i,e,l,p,d,g){return a(),r("div",null,[...e[0]||(e[0]=[t('<h1 id="foreword" tabindex="-1">Foreword <a class="header-anchor" href="#foreword" aria-label="Permalink to &quot;Foreword&quot;">​</a></h1><h2 id="new-terms" tabindex="-1">New terms <a class="header-anchor" href="#new-terms" aria-label="Permalink to &quot;New terms&quot;">​</a></h2><h3 id="_1-low-level-code" tabindex="-1">1. <strong>Low-level Code</strong> <a class="header-anchor" href="#_1-low-level-code" aria-label="Permalink to &quot;1. **Low-level Code**&quot;">​</a></h3><p><strong>Definition</strong>: &quot;Low-level&quot; refers to programming that is close to the hardware, where you have more direct control over memory and how the computer works.</p><p><strong>Example</strong>: Writing code in C or Rust lets you manage memory yourself, unlike Python or JavaScript which handle it for you.</p><p><strong>Explanation</strong>: Imagine driving a manual car (low-level) versus an automatic (high-level). With manual, you control the gears and clutch, giving you more power and responsibility.</p><h3 id="_2-parallelism" tabindex="-1">2. <strong>Parallelism</strong> <a class="header-anchor" href="#_2-parallelism" aria-label="Permalink to &quot;2. **Parallelism**&quot;">​</a></h3><p><strong>Definition</strong>: Parallelism is when a program does many things at the same time, using multiple CPU cores.</p><p><strong>Example</strong>: If you have to download files and process images, you can do both at once instead of waiting for one to finish before starting the other.</p><p><strong>Explanation</strong>: Think of a group project where everyone works on different parts at the same time, finishing faster than if one person did everything alone.</p><h3 id="_3-ergonomic" tabindex="-1">3. <strong>Ergonomic</strong> <a class="header-anchor" href="#_3-ergonomic" aria-label="Permalink to &quot;3. **Ergonomic**&quot;">​</a></h3><p><strong>Definition</strong>: In programming, &quot;ergonomic&quot; means the language or tool is designed to be easy and comfortable to use, reducing mistakes and effort.</p><p><strong>Example</strong>: Rust’s error messages are very clear and helpful, making it easier to fix bugs.</p><p><strong>Explanation</strong>: It’s like using a comfy chair and a good keyboard—they make your work easier and less tiring.</p><h3 id="_4-cli-apps" tabindex="-1">4. <strong>CLI Apps</strong> <a class="header-anchor" href="#_4-cli-apps" aria-label="Permalink to &quot;4. **CLI Apps**&quot;">​</a></h3><p><strong>Definition</strong>: CLI stands for Command Line Interface. CLI apps are programs you run and interact with using text commands in a terminal.</p><p><strong>Example</strong>: <code>git</code>, <code>ls</code>, and <code>cargo</code> are all CLI apps you use by typing commands.</p><p><strong>Explanation</strong>: It’s like talking to your computer by typing instructions, instead of clicking buttons in a window.</p><h3 id="_5-web-server" tabindex="-1">5. <strong>Web Server</strong> <a class="header-anchor" href="#_5-web-server" aria-label="Permalink to &quot;5. **Web Server**&quot;">​</a></h3><p><strong>Definition</strong>: A web server is a program that listens for requests from the internet and sends back web pages or data.</p><p><strong>Example</strong>: When you visit a website, your browser talks to a web server to get the page you see.</p><p><strong>Explanation</strong>: Imagine a restaurant: you (the browser) ask for food (a web page), and the server (the web server) brings it to you.</p><h3 id="_6-cli-tools-vs-cli-apps" tabindex="-1">6. <strong>CLI Tools vs CLI Apps</strong> <a class="header-anchor" href="#_6-cli-tools-vs-cli-apps" aria-label="Permalink to &quot;6. **CLI Tools vs CLI Apps**&quot;">​</a></h3><p><strong>Definition</strong>: Both are programs you run in the terminal, but &quot;CLI tools&quot; usually do one small job (like <code>ls</code> or <code>grep</code>), while &quot;CLI apps&quot; can be bigger programs with more features, menus, or workflows (like <code>git</code> or <code>cargo</code>).</p><p><strong>Example</strong>: <code>ls</code> lists files (a tool), while <code>git</code> manages code repositories and has many commands and options (an app).</p><p><strong>Explanation</strong>: Think of a CLI tool as a screwdriver—simple and focused. A CLI app is like a Swiss Army knife—many tools in one, often with its own help system and subcommands.</p>',26)])])}const m=o(n,[["render",s]]);export{h as __pageData,m as default};
