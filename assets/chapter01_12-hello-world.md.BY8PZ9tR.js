import{_ as t,c as a,o,ag as l}from"./chunks/framework.BSxiluPM.js";const u=JSON.parse('{"title":"Hello World","description":"","frontmatter":{},"headers":[],"relativePath":"chapter01/12-hello-world.md","filePath":"chapter01/12-hello-world.md"}'),s={name:"chapter01/12-hello-world.md"};function i(r,e,n,d,c,h){return o(),a("div",null,[...e[0]||(e[0]=[l('<h1 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h1><h2 id="rust-file" tabindex="-1">Rust file <a class="header-anchor" href="#rust-file" aria-label="Permalink to &quot;Rust file&quot;">​</a></h2><p>Ends with <code>.rs</code> extension.</p><h2 id="binary-exectuatble-file" tabindex="-1">Binary Exectuatble file <a class="header-anchor" href="#binary-exectuatble-file" aria-label="Permalink to &quot;Binary Exectuatble file&quot;">​</a></h2><p>To generate a corresponding executable binary file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rustc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.rs</span></span></code></pre></div><blockquote><p><strong>NOTE:</strong></p><ul><li><strong>On Unix:</strong> the executable has no extension (<code>main</code>)</li><li><strong>On Windows:</strong> the executable ends with <code>.exe</code> (<code>main.exe</code>)</li></ul></blockquote><h2 id="assembly-file" tabindex="-1">Assembly file <a class="header-anchor" href="#assembly-file" aria-label="Permalink to &quot;Assembly file&quot;">​</a></h2><p>To generate a corresponding assembly file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rustc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.rs</span></span></code></pre></div><blockquote><p><strong>NOTE:</strong></p><ul><li><strong>Generated file:</strong> <code>main.s</code></li></ul></blockquote><h2 id="key-concepts" tabindex="-1">Key concepts <a class="header-anchor" href="#key-concepts" aria-label="Permalink to &quot;Key concepts&quot;">​</a></h2><ol><li>Rust files always end with the .rs extension</li><li>Use underscores to separate words in filenames.</li></ol><table tabindex="0"><thead><tr><th>✅ <strong>Valid</strong></th><th>❌ <strong>Invalid</strong></th></tr></thead><tbody><tr><td><code>hello_world.rs</code></td><td><code>helloworld.rs</code></td></tr><tr><td><code>my_first_program.rs</code></td><td><code>HelloWorld.rs</code></td></tr><tr><td></td><td><code>my first program.rs</code></td></tr></tbody></table><ol start="3"><li><p><strong>rustc</strong>: The Rust compiler.<br> a. It compiles Rust code into a binary executable file (a machine code program you can run directly).</p><p>b. No matter your OS, you should see <code>Hello, world!</code> in the terminal.</p></li><li><p>main function is the entry point for a executable rust program.</p></li><li><p>If you see an exclamation mark <code>!</code> after a name (like <code>println!</code>), it means you are calling a macro, not a regular function. Macros work differently from functions in Rust.</p></li></ol>',15)])])}const b=t(s,[["render",i]]);export{u as __pageData,b as default};
